from http.server import BaseHTTPRequestHandler, HTTPServer
import os
import urllib.parse
from datetime import datetime

PORT = 8000
RESULT_DIR = 'result'

if not os.path.exists(RESULT_DIR):
    os.makedirs(RESULT_DIR)

class RequestHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        # Serve file requests
        if self.path in ['/file.bat', '/file.pdf']:
            file_path = '.' + self.path
            if os.path.exists(file_path):
                self.send_response(200)
                self.send_header('Content-type', 'application/octet-stream')
                self.send_header('Content-Disposition', 'attachment; filename=' + os.path.basename(file_path))
                self.end_headers()
                with open(file_path, 'rb') as file:
                    self.wfile.write(file.read())
            else:
                self.send_error(404, "File Not Found")
        else:
            self.send_error(404, "File Not Found")

    def do_POST(self):
        # Handle POST requests to /report
        if self.path == '/report':
            content_length = int(self.headers['Content-Length'])
            post_data = self.rfile.read(content_length).decode('utf-8')
            data = urllib.parse.parse_qs(post_data)
            
            hostname = data.get('hostname', ['unknown'])[0]
            ip = data.get('ip', ['unknown'])[0]

            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            result_filename = f"{hostname}_{timestamp}.txt"
            result_path = os.path.join(RESULT_DIR, result_filename)

            with open(result_path, 'w') as result_file:
                result_file.write(ip)

            self.send_response(200)
            self.send_header('Content-type', 'text/plain')
            self.end_headers()
            self.wfile.write(b'Result received and file created.')

        else:
            self.send_error(404, "Not Found")

def run(server_class=HTTPServer, handler_class=RequestHandler):
    server_address = ('', PORT)
    httpd = server_class(server_address, handler_class)
    print(f'Starting server on port {PORT}...')
    httpd.serve_forever()

if __name__ == "__main__":
    run()
