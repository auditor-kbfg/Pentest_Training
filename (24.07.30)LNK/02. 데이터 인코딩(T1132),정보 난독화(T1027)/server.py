from http.server import BaseHTTPRequestHandler, HTTPServer
import os
import urllib.parse
from datetime import datetime
import json

# 로그 파일 경로 설정
LOG_FILE = 'result.log'

def log_request(message):
    with open(LOG_FILE, 'a') as log_file:
        log_file.write(f'{datetime.now()} - {message}\n')

class RequestHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        base_path = os.path.dirname(__file__)  # 서버 스크립트가 위치한 디렉토리
        request_path = self.path.lstrip('/')  # 요청 경로에서 슬래시 제거

        # 기본 경로를 기준으로 요청 경로를 해석
        if request_path == '':
            request_path = base_path
        
        full_path = os.path.join(base_path, request_path)

        # 디렉터리 요청 처리
        if os.path.isdir(full_path):
            self.send_response(200)
            self.send_header('Content-type', 'text/html')
            self.end_headers()
            
            # HTML로 디렉터리 목록 생성
            files = os.listdir(full_path)
            html = '<html><body><h1>Directory listing for {}</h1><ul>'.format(request_path)
            for file in files:
                file_url = urllib.parse.quote(file)
                html += '<li><a href="{}/">{}</a></li>'.format(request_path, file)
            html += '</ul></body></html>'
            self.wfile.write(html.encode('utf-8'))

        # 파일 요청 처리
        elif os.path.isfile(full_path):
            self.send_response(200)
            self.send_header('Content-type', 'application/octet-stream')
            self.send_header('Content-Disposition', f'attachment; filename="{os.path.basename(full_path)}"')
            self.end_headers()
            with open(full_path, 'rb') as file:
                self.wfile.write(file.read())

        # 잘못된 요청 처리
        else:
            self.send_response(404)
            self.send_header('Content-type', 'text/plain')
            self.end_headers()
            self.wfile.write(b'404 Not Found')

    def do_POST(self):
        content_length = int(self.headers['Content-Length'])
        post_data = self.rfile.read(content_length)

        # 로그에 POST 데이터 기록
        try:
            data = json.loads(post_data)
            log_request(f'POST data: {json.dumps(data)}')
        except json.JSONDecodeError:
            log_request(f'POST data: {post_data.decode("utf-8")}')

        self.send_response(200)
        self.send_header('Content-type', 'text/plain')
        self.end_headers()
        self.wfile.write(b'POST request received and logged.')

def run(server_class=HTTPServer, handler_class=RequestHandler, port=8000):
    server_address = ('', port)
    httpd = server_class(server_address, handler_class)
    print(f'Starting httpd on port {port}...')
    httpd.serve_forever()

if __name__ == '__main__':
    run()
