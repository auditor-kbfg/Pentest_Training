import socket
import ssl
import requests
from concurrent.futures import ThreadPoolExecutor
import sys
from datetime import datetime

# 포트 스캔 함수
def scan_port(ip, port):
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
        sock.settimeout(1)
        result = sock.connect_ex((ip, port))
        return port if result == 0 else None

# 서버 정보 가져오기
def get_server_info(ip, port, use_https):
    try:
        protocol = "https" if use_https else "http"
        url = f"{protocol}://{ip}:{port}"
        response = requests.get(url, timeout=2, verify=False)
        server = response.headers.get('Server', 'Unknown')
        length = len(response.content)
        return server, length
    except requests.RequestException:
        return None, None

# 403/404 에러를 발생시키고 키워드를 확인하는 함수
def trigger_error_and_check(ip, port, use_https, error_type):
    protocol = "https" if use_https else "http"
    url = f"{protocol}://{ip}:{port}"
    
    if error_type == 404:
        url += "/abcd.txgw"  # 404 에러 발생 경로
        methods = ['GET']
    elif error_type == 403:
        methods = ['OPTIONS', 'TRACE', 'PUT', 'DELETE']  # 403 에러를 유발할 수 있는 메소드들
    
    headers = {
        'User-Agent': 'unauthorized-user',
        'Authorization': 'Bearer invalid_token'
    }
    
    for method in methods:
        try:
            if method == 'GET':
                response = requests.get(url, headers=headers, timeout=2, verify=False)
            else:
                response = requests.request(method, url, headers=headers, timeout=2, verify=False)
            
            if response.status_code == error_type:
                content = response.text
                return content, method
        except requests.RequestException:
            continue
    
    return None, None

# 키워드 확인 함수
def check_for_keywords(content, keywords):
    found_keywords = []
    content_lower = content.lower()
    for keyword in keywords:
        if keyword.lower() in content_lower:
            # 원래 대소문자를 유지한 키워드를 결과에 추가
            found_keywords.append(keyword)
    return found_keywords

# 결과 저장 함수
def save_error_check(ip, port, protocol, keywords_found, error_type, method):
    with open('server.txt', 'a') as file:
        for keyword in keywords_found:
            file.write(f"{keyword} Found in '{protocol}://{ip}:{port}' error {error_type} (Method: {method})\n")
    print(f"Keyword search results for error {error_type} saved to server.txt for {ip}:{port} ({protocol}, Method: {method})")

# 포트 스캔
def scan_ports(ip):
    open_ports = []
    total_ports = 65535
    print(f"Scanning ports for {ip}...")
    with ThreadPoolExecutor(max_workers=1000) as executor:
        futures = [executor.submit(scan_port, ip, port) for port in range(1, total_ports + 1)]
        for i, future in enumerate(futures):
            port = future.result()
            if port:
                open_ports.append(port)
                print(f"Open port found: {port}")
            if (i + 1) % 10000 == 0:
                print(f"Progress: {i + 1}/{total_ports} ports scanned")
    return open_ports

# 파일에서 IP 읽기
def read_ips_from_file(filename):
    with open(filename, 'r') as file:
        return [line.strip() for line in file if line.strip()]

# 포트 정보 저장
def save_ports(ip, ports):
    with open('port.txt', 'a') as file:
        file.write(f"{ip}: {','.join(map(str, ports))}\n")
    print(f"Open ports for {ip} saved to port.txt")

# 서버 정보 저장
def save_server_info(ip, port, server, length, protocol):
    with open('server.txt', 'a') as file:
        file.write(f"{ip}:{port} ({protocol}) - Server: {server}, Length: {length}\n")
    print(f"Server info for {ip}:{port} ({protocol}) saved to server.txt")

# 메인 함수
def main():
    ips = read_ips_from_file('ip.txt')
    print(f"Loaded {len(ips)} IP addresses from ip.txt")
    
    keywords = ['Tomcat', 'Apache', 'IIS', 'WebLogic', 'Nginx', 'iPlanet', 'IHS', 'WebSphere', 'Jeus', 'JBoss']
    print("Using keywords (case-insensitive):", ", ".join(keywords))
    
    for ip in ips:
        print(f"\nStarting scan for {ip}...")
        open_ports = scan_ports(ip)
        print(f"Scan completed for {ip}. Found {len(open_ports)} open ports.")
        save_ports(ip, open_ports)
        
        for port in open_ports:
            for use_https in [False, True]:
                protocol = "https" if use_https else "http"
                print(f"Checking {protocol.upper()} on {ip}:{port}")
                server, length = get_server_info(ip, port, use_https)
                if server and length:
                    save_server_info(ip, port, server, length, protocol)
                    
                    # 403/404 에러 유발 및 키워드 검색
                    for error_type in [403, 404]:
                        print(f"Triggering error {error_type} check on {ip}:{port} ({protocol})")
                        content, method = trigger_error_and_check(ip, port, use_https, error_type)
                        if content:
                            keywords_found = check_for_keywords(content, keywords)
                            if keywords_found:
                                save_error_check(ip, port, protocol, keywords_found, error_type, method)
                        else:
                            print(f"No error {error_type} response from {ip}:{port} ({protocol})")
                else:
                    print(f"No valid response from {ip}:{port} ({protocol})")
        
        print(f"Scan and analysis completed for {ip}")

if __name__ == "__main__":
    requests.packages.urllib3.disable_warnings(requests.packages.urllib3.exceptions.InsecureRequestWarning)
    print("Starting port scanning and HTTP/HTTPS analysis script...")
    main()
    print("Script execution completed.")